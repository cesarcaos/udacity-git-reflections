What happens when you initialize a repository? Why do you need to do it?

	I guess Git identifies all the files and folder hierarchy existants in the repository folder. Some other 
	information like timestamps may also be gathered. Since a repository is not just a regular folder, I think this is
	necessary in order to Git manage multiple repositories and know what files and folder belong to what repository.
	
How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is an intermediate place between the working directory and the repository itself. It contains the
	files present in the working directory that someone wants to commit to the directory. In this way, a commit 
	contains all the files that represent the logical change. Otherwise, each file would be commited separetely, 
	although they are logically related. When checking out a commit, initially the staging area contains a copy of all
	the files present in that commit.
	
How can you use the staging area to make sure you have one commit per logical change?

	This can be done by two verifications. The first one is comparing the working directory with the staging area 
	through the command 'git diff'. In this way, it's possible to see which files have been modified and choose only
	those that make a logical change to add to the staging area.
	The second one is done comparing the staging area with the repository through the command 'git diff --staged'. This
	allows me to see all the files that were added to the staging area and pinpoint the ones missing or the ones that
	are not part of this logical change.
	
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches are helpful in situations like bug fixing and adding experimental features or designs, for example. They
	are helpful because they keep the master branch intact while allowing to easily change from one branch to another 
	and keep working with them until a merge is necessary.
	
How do the diagrams help you visualize the branch structure?

	The diagrams make more intuitive the tree of branches with its correspondent commits in the repository, allowing to
	see whether there are unreachable nodes and which features are present in each branch (according to the commit 
	message).
	
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The resulting merged node will have all the code modificatins, additions and removals from its parents. Since the
	resulting node have more then one father node, it will have one arrow per father leaving from it.
	
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Automatic merging does part of the programmers' work, making development more efficient. However, it cannot handle 
	some types of conflicts, since it would be necessary a greal deal of artificial intelligence for it to know how
	to solve all kinds of conflicts. For those situations, the programmers take control and use their expertise to 
	figure out how to solve the conflict, avoiding unexpected results that the automation could bring.